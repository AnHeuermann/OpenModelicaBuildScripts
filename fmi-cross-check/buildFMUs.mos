// TODO: Move this first part to additional file. Create it OS-dependent and read the values from that.
DOCKER_CONTAINER := "openmodelica:nightly-1.16-dev-focal";

OMC_COMPILER := "CC=clang\nCXX=clang++";
AVAILABLE_PLATFORMS := "linux64";
OS_SHORT := "linux64";
PLATFORMS := "{\"static\"}";
FMI_VERSION := {"1.0", "2.0"};
FMI_TYPES := {"me", "cs"};
MODELICA_VERSION := "4.0.0";
REFERENCE_INTEGRATOR_METHOD := "dassl";
CREATE_REFERENCES := true;



TOOL_ID := "OpenModelica";


// Don't touch this

// Load MSL
success := loadModel(Modelica, {MODELICA_VERSION}); 
getErrorString();
if not success then
  print("Could not load Modelica Standard Library version " + MODELICA_VERSION + "\n");
  //exit(1);
end if;


// Load test models
appendEnvironmentVar("MODELICA_VERSION", MODELICA_VERSION); getErrorString();
r := runScript("testModels.mos");
getErrorString();
if r=="Failed" then
  print("Failed to load test models from \"testModels.mos\" \n");
  exit(1);
end if;

tmpVersion := stringSplit(getVersion()," ");            // Remove everything before first space
TOOL_VERSION := stringReplace(tmpVersion[2],"~", "-");  // Replay "~" with "-"

print("OMC version: " + TOOL_VERSION + "\n");

cd("fmus");
thisDir := cd("");

for fmiVersion in FMI_VERSION loop
  for fmiType in FMI_TYPES loop
    // Skipp FMI 1.0 + CS
    skip := false;
    if fmiVersion=="1.0" then
      if fmiType=="cs" then
        print("Skipping not supported combination " +fmiVersion+ " + " +fmiType+ "\n");
        skip := true;
      end if;
    end if;

    if not skip then
      for testModel in TEST_MODELS loop
        testModelFullName := testModel[1];
        testModelShortName := testModel[2];
        testModelDescription := testModel[3];
        testModelValiadtionVars := stringSplit(testModel[4], ",");
        print("\nTesting " + testModelShortName + " for FMI " +fmiVersion+ " " + fmiType + 
              "\n===============================================================================\n");

        // Enter model directory
        testModelDir := thisDir + "/" + fmiVersion + "/" + fmiType + "/" + OS_SHORT + "/" + TOOL_ID + "/" + TOOL_VERSION + "/" + testModelShortName;
        mkdir(testModelDir); getErrorString();
        out := cd(testModelDir); getErrorString();
        print("Entering "+ out + "\n");

        (start,stop,tolerance,numberOfIntervals,interval) := getSimulationOptions(testModelFullName);
        if CREATE_REFERENCES then
          // Create reference results
          writeFile("createRef.mos", "
SimulationResult := simulate("+testModelFullName+", startTime="+String(start)+", stopTime="+String(stop)+", numberOfIntervals="+String(numberOfIntervals)+", tolerance="+String(tolerance)+", method=\""+REFERENCE_INTEGRATOR_METHOD+"\", fileNamePrefix=\""+testModelShortName+"\", outputFormat=\"csv\");
print(getErrorString()+\"\\n\");
");
          getErrorString();

          r := runScript("createRef.mos");
          if r=="Failed" then
            print("Failed to run createRef.mos for " + testModelFullName + "\n");
            exit(1);
          end if;

          copy(testModelShortName+"_res.csv", testModelShortName+"_ref.csv");
          remove(testModelShortName+"_res.csv");
          // TODO Filter results for testModelValiadtionVars
          // csv not implemented for filterSimulationResults
          //success := filterSimulationResults(testModelShortName+"_res.csv", testModelShortName+"_ref.csv", testModelValiadtionVars, 0, true);
          //getErrorString();
          if not regularFileExists(testModelShortName+"_ref.csv") then
            print("Failed to create reference results for " + testModelFullName + "\n");
            exit(1);
          else
            print("Created refrence results!\n");
          end if;

          // Create simulation settings
          writeFile(testModelShortName+"_ref.opt", "StartTime, "+String(start)+"
StopTime, "+String(stop)+"
StepSize, 0.0
RelTol, "+String(tolerance));
          getErrorString();

          if not regularFileExists(testModelShortName+"_ref.opt") then
            print("Failed to create reference simulation settings for " + testModelFullName + "\n");
            exit(1);
          else
            print("Created refrence simulation settings!\n");
          end if;

          // Create README
          writeFile("README.txt",
"Model Description:
"+testModelDescription+"

Generating tool:
"+getVersion()+" from docker "+DOCKER_CONTAINER+"

Generation scripts:
See Jenkinsfile in https://github.com/OpenModelica/OpenModelicaBuildScripts/tree/master/fmi-cross-check/.

Compiler:
"+OMC_COMPILER+"

Available platforms:
"+AVAILABLE_PLATFORMS+"

Contact:
See https://github.com/OpenModelica/OpenModelica");
          getErrorString();
        
          if not regularFileExists("README.txt") then
            print("Failed to create README.txt for " + testModelFullName + "\n");
            exit(1);
          else
            print("Created README!\n");
          end if;
        end if;

        // Build FMU
        writeFile("buildFMU.mos", "
fmu := buildModelFMU("+testModelFullName+", version=\""+fmiVersion+"\", fmuType=\""+fmiType+"\", fileNamePrefix=\""+testModelShortName+"\", platforms="+PLATFORMS+");
print(getErrorString()+\"\\n\");
if fmu == \"\" then
  exit(1);
end if;");
        r := runScript("buildFMU.mos");
        if r=="Failed" then
          print("Failed to compile FMU for " + testModelFullName + "\n");
          exit(1);
        end if;

        if not regularFileExists(testModelShortName+".fmu") then
          print("Failed to create FMU for " + testModelFullName + "\n");
          exit(1);
        else
            print("Build FMU "+testModelShortName+".fmu!\n");
        end if;

      end for;

    end if; /* if not skip */
  end for;
end for;

print("All FMUs build!\nFinished successful\n");
exit(0);
