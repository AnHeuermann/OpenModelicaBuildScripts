// Change the following parameters to add new tests.
// TODO: Move this first part to additional file. Create it OS-dependent and read the values from that.
echo(false);
DOCKER_CONTAINER := "openmodelica:nightly-1.16-dev-focal";
OMC_COMPILER := "CC=clang\nCXX=clang++";
AVAILABLE_PLATFORMS := "linux64";
OS_SHORT := "linux64";
PLATFORMS := "{\"static\"}";
FMI_VERSION := {"1.0", "2.0"};
FMI_TYPES := {"me", "cs"};
MODELICA_VERSION := "4.0.0";
REFERENCE_INTEGRATOR_METHOD := "dassl";
CREATE_REFERENCES := true;

// TODO: Move tests to an additional file as well
// Add for each test a list {<testModelFullName>, <testModelShortName>, <testModelDescription>}
TEST_MODELS := {{"BouncingBall","BouncingBall", "Bouncing ball example from https://github.com/OpenModelica/OpenModelica/blob/master/OMCompiler/Examples/BouncingBall.mo."},
                {"Modelica.Electrical.Analog.Examples.Rectifier","Rectifier", "Modelica.Electrical.Analog.Examples.Rectifier from MSL "+MODELICA_VERSION},
                {"Modelica.Mechanics.Rotational.Examples.CoupledClutches","CoupledClutches", "Modelica.Mechanics.Rotational.Examples.CoupledClutches from MSL "+MODELICA_VERSION},
                {"Modelica.Thermal.HeatTransfer.Examples.ControlledTemperature","ControlledTemperature", "Modelica.Thermal.HeatTransfer.Examples.ControlledTemperature from MSL "+MODELICA_VERSION}};

loadString("
model BouncingBall
  parameter Real e=0.7 \"coefficient of restitution\";
  parameter Real g=9.81 \"gravity acceleration\";
  Real h(fixed=true, start=1) \"height of ball\";
  Real v(fixed=true) \"velocity of ball\";
  Boolean flying(fixed=true, start=true) \"true, if ball is flying\";
  Boolean impact;
  Real v_new(fixed=true);
  Integer foo;
equation
  impact = h <= 0.0;
  foo = if impact then 1 else 2;
  der(v) = if flying then -g else 0;
  der(h) = v;
  when {h <= 0.0 and v <= 0.0,impact} then
    v_new = if edge(impact) then -e*pre(v) else 0;
    flying = v_new > 0;
    reinit(v, v_new);
  end when;
end BouncingBall;"); getErrorString();
loadModel(Modelica.Electrical.Analog.Examples.Rectifier); getErrorString();
loadModel(Modelica.Mechanics.Rotational.Examples.CoupledClutches); getErrorString();
loadModel(Modelica.Thermal.HeatTransfer.Examples.ControlledTemperature); getErrorString();


// Don't touch this
TOOL_ID := "OpenModelica";
tmpVersion := stringSplit(getVersion()," ");            // Remove everything before first space
TOOL_VERSION := stringReplace(tmpVersion[2],"~", "-");  // Replay "~" with "-"

// Load MSL
success := loadModel(Modelica, {MODELICA_VERSION}); getErrorString();
if not success then
  print("Could not load Modelica Standard Library version " + MODELICA_VERSION + "\n");
  exit(1);
end if;
echo(true);

print("OMC version: " + TOOL_VERSION + "\n");

cd("fmus");
thisDir := cd("");

for fmiVersion in FMI_VERSION loop
  for fmiType in FMI_TYPES loop
    // Skipp FMI 1.0 + CS
    skip := false;
    if fmiVersion=="1.0" then
      if fmiType=="cs" then
        print("Skipping not supported combination " +fmiVersion+ " + " +fmiType+ "\n");
        skip := true;
      end if;
    end if;

    if not skip then
      for testModel in TEST_MODELS loop
        testModelFullName := testModel[1];
        testModelShortName := testModel[2];
        testModelDescription := testModel[3];
        print("\nTesting" + testModelShortName + " for FMI " +fmiVersion+ " " + fmiType + "\n===============================================================================\n");

        // Enter model directory
        testModelDir := thisDir + "/" + fmiVersion + "/" + fmiType + "/" + OS_SHORT + "/" + TOOL_ID + "/" + TOOL_VERSION + "/" + testModelShortName;
        mkdir(testModelDir); getErrorString();
        out := cd(testModelDir); getErrorString();
        print("Entering "+ out + "\n");

        (start,stop,tolerance,numberOfIntervals,interval) := getSimulationOptions(testModelFullName);
        if CREATE_REFERENCES then
          // Create reference results
          writeFile("createRef.mos", "
  SimulationResult := simulate("+testModelFullName+", startTime="+String(start)+", stopTime="+String(stop)+", numberOfIntervals="+String(numberOfIntervals)+", tolerance="+String(tolerance)+", method=\""+REFERENCE_INTEGRATOR_METHOD+"\", fileNamePrefix=\""+testModelShortName+"\", outputFormat=\"csv\");
  print(getErrorString()+\"\\n\");
  ");
          getErrorString();

          r := runScript("createRef.mos");
          if r=="Failed" then
            print("Failed to run createRef.mos for " + testModelFullName + "\n");
            exit(1);
          end if;

          copy(testModelShortName+"_res.csv", testModelShortName+"_ref.csv");
          remove(testModelShortName+"_res.csv");
          if not regularFileExists(testModelShortName+"_ref.csv") then
            print("Failed to create reference results for " + testModelFullName + "\n");
            exit(1);
          else
            print("Created refrence results!\n");
          end if;

          // Create simulation settings
          writeFile(testModelShortName+"_ref.opt", "StartTime, "+String(start)+"
  StopTime, "+String(stop)+"
  StepSize, 0.0
  RelTol, "+String(tolerance));
          getErrorString();

          if not regularFileExists(testModelShortName+"_ref.opt") then
            print("Failed to create reference simulation settings for " + testModelFullName + "\n");
            exit(1);
          else
            print("Created refrence simulation settings!\n");
          end if;

          // Create README
          writeFile("README.txt",
"Model Description:
"+testModelDescription+"

Generating tool:
"+getVersion()+" from docker "+DOCKER_CONTAINER+"

Generation scripts:
See Jenkinsfile in https://github.com/OpenModelica/OpenModelicaBuildScripts/tree/master/fmi-cross-check/.

Compiler:
"+OMC_COMPILER+"

Available platforms:
"+AVAILABLE_PLATFORMS+"

Contact:
See https://github.com/OpenModelica/OpenModelica");
          getErrorString();
        
          if not regularFileExists("README.txt") then
            print("Failed to create README.txt for " + testModelFullName + "\n");
            exit(1);
          else
            print("Created README!\n");
          end if;
        end if;

        // Build FMU
        writeFile("buildFMU.mos", "
  fmu := buildModelFMU("+testModelFullName+", version=\""+fmiVersion+"\", fmuType=\""+fmiType+"\", fileNamePrefix=\""+testModelShortName+"\", platforms="+PLATFORMS+");
  print(getErrorString()+\"\\n\");
  if fmu == \"\" then
    exit(1);
  end if;");
        r := runScript("buildFMU.mos");
        if r=="Failed" then
          print("Failed to compile FMU for " + testModelFullName + "\n");
          exit(1);
        end if;

        if  not regularFileExists(testModelShortName+".fmu") then
          print("Failed to create FMU for " + testModelFullName + "\n");
          exit(1);
        else
            print("Build FMU "+testModelShortName+".fmu!\n");
        end if;

      end for;

    end if; /* if not skip */
  end for;
end for;

print("All FMUs build!\n\n\nFinished successful");
exit(0);
