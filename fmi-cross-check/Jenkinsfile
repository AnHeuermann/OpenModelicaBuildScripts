pipeline {
  //agent none
  agent any
  parameters {
    booleanParam(name: 'LINUX64BIONIC', defaultValue: true, description: 'Test on Ubuntu 18.04 LTS')
    booleanParam(name: 'LINUX64FOCAL', defaultValue: true, description: 'Test on Ubuntu 20.04 LTS')
    booleanParam(name: 'LINUX32', defaultValue: false, description: 'Test on some 32bit Linux')
    booleanParam(name: 'WINE64', defaultValue: true, description: 'Test Windows with wine on Linux')
    booleanParam(name: 'WIN64', defaultValue: false, description: 'Test on Windows 10 64 bit')
    booleanParam(name: 'WIN32', defaultValue: false, description: 'Test on Windows 10 32 bit')
    booleanParam(name: 'DARWIN64', defaultValue: false, description: 'Test on some mac OS')
    booleanParam(name: 'CCODE', defaultValue: false, description: 'Test on Ubuntu 18.04 LTS for self compiled C code')
  }
  stages {
    stage('FMI Cross Check') {
      parallel {
        stage('linux64-bionic') {
          when {
            expression { return params.LINUX64BIONIC }
            beforeAgent true
          }
          options {
            timeout(time: 60, unit: 'MINUTES')
          }
          agent {
            docker {
              alwaysPull true
              image 'anheuermann/ompython:bionic'
              label 'linux'
            }
          }
          environment {
            String testFMUPlatform = 'linux64'
            String omsPlatform = 'linux-amd64'
            String os = "Ubuntu 18.04 LTS"
            String buildDate = sh(script: "echo `date '+%y-%m-%d %H:%M'`", returnStdout: true).trim()
            String omsCall = "${env.WORKSPACE}" + "/OMSimulatorBinaries/OMSimulator-${omsPlatform}/bin/OMSimulator"
          }
          steps {
            installOMSArtifactsUnix(omsPlatform)
            cloneOMSGitRepo()
            updateFmiCrossCheck()
            script {
              def (omsVersion, omsVersionShort) = getOMSVersion(omsCall)
              def timeStart = new Date()
              runFmiCrossCheck(testFMUPlatform, omsCall)
              validateResults(testFMUPlatform, omsVersion)
              def timeStop = new Date()
              generateHTML(omsVersionShort, omsVersion, testFMUPlatform, os, timeStart, "123456")
            }
          }
          post {
            success {
              sh """mkdir -p OMSimulator/testsuite/fmi-cross-check/linux64-bionic
                mv OMSimulator/testsuite/fmi-cross-check/html/** OMSimulator/testsuite/fmi-cross-check/linux64-bionic
                """
              archiveArtifacts artifacts: 'OMSimulator/testsuite/fmi-cross-check/linux64-bionic/**/*.*', fingerprint: true
              sshPublisher(
                publishers: [
                  sshPublisherDesc(
                    configName: 'FMICrossCheck',
                    transfers: [
                      sshTransfer(
                        sourceFiles: "OMSimulator/testsuite/fmi-cross-check/linux64-bionic/**/*.*",
                        removePrefix: "OMSimulator/testsuite/fmi-cross-check/",
                        remoteDirectory: "OMSimulator/history/${BUILD_DATE}/"
                      )
                    ]
                  )
                ]
              )
            }
          }
        }

        stage('linux64-focal') {
          when {
            expression { return params.LINUX64FOCAL }
            beforeAgent true
          }
          options {
            timeout(time: 60, unit: 'MINUTES')
          }
          agent {
            docker {
              alwaysPull true
              image 'anheuermann/ompython:focal'
              label 'linux'
            }
          }
          environment {
            String testFMUPlatform = 'linux64'
            String omsPlatform = 'linux-amd64'
            String os = "Ubuntu 20.04 LTS"
            String buildDate = sh(script: "echo `date '+%y-%m-%d %H:%M'`", returnStdout: true).trim()
            String omsCall = "${env.WORKSPACE}" + "/OMSimulatorBinaries/OMSimulator-${omsPlatform}/bin/OMSimulator"
          }
          steps {
            installOMSArtifactsUnix(omsPlatform)
            cloneOMSGitRepo()
            updateFmiCrossCheck()
            script {
              def (omsVersion, omsVersionShort) = getOMSVersion(omsCall)
              def timeStart = new Date()
              runFmiCrossCheck(testFMUPlatform, omsCall)
              validateResults(testFMUPlatform, omsVersion)
              def timeStop = new Date()
              generateHTML(omsVersionShort, omsVersion, testFMUPlatform, os, timeStart, "123456")
            }
          }
          post {
            success {
              sh """mkdir -p OMSimulator/testsuite/fmi-cross-check/linux64-focal
                mv OMSimulator/testsuite/fmi-cross-check/html/** OMSimulator/testsuite/fmi-cross-check/linux64-focal
                """
              archiveArtifacts artifacts: "OMSimulator/testsuite/fmi-cross-check/linux64-focal/**/*.*", fingerprint: true
              sshPublisher(
                publishers: [
                  sshPublisherDesc(
                    configName: 'FMICrossCheck',
                    transfers: [
                      sshTransfer(
                        sourceFiles: "OMSimulator/testsuite/fmi-cross-check/linux64-focal/**/*.*",
                        removePrefix: "OMSimulator/testsuite/fmi-cross-check/",
                        remoteDirectory: "OMSimulator/history/${buildDate}/"
                      )
                    ]
                  )
                ]
              )
            }
          }
        }

        stage('wine64') {
          when {
            expression { return params.WINE64 }
            beforeAgent true
          }
          options {
            timeout(time: 60, unit: 'MINUTES')
          }
          agent {
            docker {
              alwaysPull true
              image 'anheuermann/ompython:wine-bionic'
              //label 'linux'
            }
          }
          environment {
            String testFMUPlatform = 'win64'
            String omsPlatform = 'mingw64'
            String os = "Ubuntu 18.04 LTS with Wine 64bit using MINGW64 OMSimulator"
            String buildDate = sh(script: "echo `date '+%y-%m-%d %H:%M'`", returnStdout: true).trim()
            String omsCall = "wine64 " + "${env.WORKSPACE}" + "/OMSimulatorBinaries/OMSimulator-${omsPlatform}/bin/OMSimulator.exe"
          }
          steps {
            installOMSArtifactsUnix(omsPlatform)
            cloneOMSGitRepo()
            updateFmiCrossCheck()
            script {
              def (omsVersion, omsVersionShort) = getOMSVersion(omsCall)
              def timeStart = new Date()
              runFmiCrossCheck(testFMUPlatform, omsCall)
              validateResults(testFMUPlatform, omsVersion)
              def timeStop = new Date()
              generateHTML(omsVersionShort, omsVersion, testFMUPlatform, os, timeStart, "123456")
            }
          }
          post {
            success {
              sh """mkdir -p OMSimulator/testsuite/fmi-cross-check/linux64-bionic
                mv OMSimulator/testsuite/fmi-cross-check/html/** OMSimulator/testsuite/fmi-cross-check/linux64-bionic
                """
              archiveArtifacts artifacts: 'OMSimulator/testsuite/fmi-cross-check/linux64-bionic/**/*.*', fingerprint: true
              sshPublisher(
                publishers: [
                  sshPublisherDesc(
                    configName: 'FMICrossCheck',
                    transfers: [
                      sshTransfer(
                        sourceFiles: "OMSimulator/testsuite/fmi-cross-check/linux64-bionic/**/*.*",
                        removePrefix: "OMSimulator/testsuite/fmi-cross-check/",
                        remoteDirectory: "OMSimulator/history/${buildDate}/"
                      )
                    ]
                  )
                ]
              )
            }
          }
        }
      }
    }
  }
}

/*
 *  Unzip latest OMSimulator binary from last successful build artifact
 */
def installOMSArtifactsUnix(platform) {
  echo "Unpacking OMSimulator binaries to OMSimulatorBinaries/OMSimulator-${platform}"

  sh """
    rm -rf archive/ OMSimulatorBinaries/
    wget -q "https://test.openmodelica.org/jenkins/job/OMSimulator/job/master/lastSuccessfulBuild/artifact/*zip*/archive.zip" -O archive.zip
    unzip -qq -o archive.zip
    mkdir -p OMSimulatorBinaries/OMSimulator-${platform}
    file=\$(ls archive/OMSimulator-${platform}-*)
    ending=`echo -n \$file | tail -c 7`
    if [ "\$ending" = ".tar.gz" ]; then
      tar -xvz -f \$file -C OMSimulatorBinaries/OMSimulator-${platform}
    else
      unzip \$file -d OMSimulatorBinaries/OMSimulator-${platform}
    fi
    """
}

/*
 *  Clone OMSimulator repo
 */
def cloneOMSGitRepo () {
  echo "Cloning Git repo OpenModelica/OMSimulator"
  sh """
  if [ -d "OMSimulator" ]; then
    cd OMSimulator
    git clean -df
    git fetch origin
    git reset --hard origin/master
  else
    git clone --recursive https://github.com/OpenModelica/OMSimulator.git OMSimulator
    cd OMSimulator
    git fetch origin
    git reset --hard origin/master
  fi
  """
}

/*
 *  Update fmi-cross-check repository from GitHub
 */
def updateFmiCrossCheck() {
  echo "Update FMI Cross Check repo"
  sh """
  cd OMSimulator/testsuite/fmi-cross-check
  make fmi-cross-check-update
  make clean
  cd fmi-cross-check && git status && git log -1
  """
}


def getOMSVersion(omsCall) {
  echo omsCall
  String omsVersion = sh(script: "${omsCall} --version", returnStdout: true).trim()
  omsVersion = omsVersion.replace("OMSimulator ", "")
  String omsVersionShort = omsVersion
  if (omsVersionShort.contains("dev")) {
    omsVersionShort = omsVersion.split("dev")[0]
    omsVersionShort = omsVersionShort[0..-2]
  }
  println omsVersion
  println omsVersionShort
  return [omsVersion, omsVersionShort]
}


/*
 *  Run FMI Cross Check test for import with OMSimulator
 */
def runFmiCrossCheck(platform, omsimulator) {
  echo "Run FMI Cross Check"
  sh """
  $omsimulator --version
  cd OMSimulator/testsuite/fmi-cross-check
  python3 importFMUs.py fmi-cross-check \"${platform}\" \"${omsimulator}\"
  """
}

def validateResults(platform, omsVersion) {
  echo "Validate Results"
  sh """
  cd OMSimulator/testsuite/fmi-cross-check
  python3 validateResults.py fmi-cross-check \"${platform}\" \"${omsVersion}\"
  """
}

def generateHTML(omsVersionShort, omsVersion, platform, os, startTime, durationInSec) {
  echo "Generate Result Overview HTML"
  echo ""
  sh """
  cd OMSimulator/testsuite/fmi-cross-check
  python3 generateHTML.py fmi-cross-check \"${platform}\" \"${omsVersion}\" \"${omsVersionShort}\" \"${os}\" \"${startTime}\" \"${durationInSec}\"
  """
}
